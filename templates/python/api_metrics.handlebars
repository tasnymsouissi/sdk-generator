{{>partial_header}}

import time

try:
    from datadog import statsd
except ImportError:

    class FakeStatsd:
        def timing(self, *args, **kwargs):
            pass

    statsd = FakeStatsd()

try:
    from datadog import tracer
except ImportError:

    class FakeSpan:
        def finish(self, *args, **kwargs):
            pass

    class FakeSpanFactory:
        def trace(self, *args, **kwargs):
            return FakeSpan()

    tracer = FakeSpanFactory()

DD_STATUS_TAG_SUCCESS: str = "status:success"
DD_STATUS_TAG_ERROR: str = "status:error"
DD_TIMING_METRIC_NAME: str = "sdk.api_client.request"
DD_TRACER_SPAN_NAME: str = "{{packageName}}.api_client.request"


def api_client_request_metrics(request):
    """
    Decorator responsible for sending requests statistics.

    It will create datadog tracer spans and timing metrics.

    Example:
        ```python
        @api_client_request_metrics
        def request(...):
           ...
        ```
    """

    def wrapped(self, method: str, url: str, **kwargs):
        start_time = time.time()
        metric_status = DD_STATUS_TAG_SUCCESS
        span = tracer.trace(DD_TRACER_SPAN_NAME)

        try:
            return request(self, method, url, **kwargs)
        except Exception:
            metric_status = DD_STATUS_TAG_ERROR
            raise
        finally:
            tags = [
                metric_status,
                f"sdk:{{packageName}}",
                f"method:{method}",
                f"protocol:http",
            ]
            duration: float = time.time() - start_time
            statsd.timing(metric=DD_TIMING_METRIC_NAME, value=duration, tags=tags)
            span.finish()

    return wrapped
