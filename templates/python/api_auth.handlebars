{{>partial_header}}
import os
import typing

from urllib3._collections import HTTPHeaderDict

UPPER_PACKAGE_NAME = "{{packageName}}".upper()

try:
    from auth_s2s_jwe import generate_authorization_header
except ImportError:
    def generate_authorization_header(*args, **kwargs):
        raise NotImplementedError("Library backmarket-auth-s2s-jwe is missing. Install by adding marker [auth-s2s-jwe] to requirements.")


def api_client_request_auth(request):
    """
    Decorator responsible for populating the "Authorization" header
    with a valid JWE token everytime `request` is called.

    In order to use it, the Configuration.jwe_configuration attribute must be set and the
    library `backmarket-auth-s2s-jwe` must be installed.

    Example:
        ```python
        @api_client_request_auth
        def request(...):
           ...
        ```
    """

    def wrapped(self, *args, headers: typing.Optional[HTTPHeaderDict] = None, **kwargs):
        if not self.configuration.jwe_configuration:
            return request(self, *args, headers=headers, **kwargs)

        auth_header = generate_authorization_header(
            self.configuration.jwe_configuration.service_account,
            {
                "jwe_expiration_in_sec": self.configuration.jwe_configuration.expiration_in_sec,
                "src_private_key_pem": self.configuration.jwe_configuration.private_key,
                "dst_public_key_pem": self.configuration.jwe_configuration.public_key,
            },
        )
        if headers is None:
            headers = HTTPHeaderDict()
        headers["Authorization"] = f"Bearer {auth_header}"

        return request(self, *args, headers=headers, **kwargs)

    return wrapped
